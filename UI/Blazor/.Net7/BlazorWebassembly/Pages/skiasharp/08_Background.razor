@page "/skiasharp/background"
@using SkiaSharp
@using SkiaSharp.Views.Blazor
@attribute [RoutePriority(8)]

<div class="container">
    <div class="row">
        <div class="col border rounded p-2 canvas-container position-relative">
            <div style="position: absolute;bottom: 10px;left:15%; transform: translateX(-50%);z-index: 10;">
                <button class="btn btn-secondary" @onclick="HandleFitScreen">Fit Screen</button>
                <span class="ml-2 no-select">X: @currentX.ToString("F2"), Y: @currentY.ToString("F2")</span>
            </div>
            <SKCanvasView @ref="skiaView" OnPaintSurface="OnPaintSurface"
                          IgnorePixelScaling="false"
                          @onmousemove="OnMouseMove"
                          @onmousedown="OnMouseDown"
                          @onmouseup="OnMouseUp"
                          @onwheel="OnWheel" />

        </div>
    </div>
</div>

@code
{
    private double currentX;
    private double currentY;
    SKCanvasView skiaView = null!;
    SKPoint? touchLocation;
    private ViewportManager _viewportManager = null!;
    private SKImage? map = null;
    private SKSize? mapSize = null;

    protected override void OnInitialized()
    {

        var base64String = "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";

        // 移除可能存在的 "data:image/png;base64," 前缀
        string cleanBase64 = base64String.Contains(",") ? base64String.Split(',')[1] : base64String;

        // 将Base64字符串转换为字节数组
        byte[] imageBytes = Convert.FromBase64String(cleanBase64);

        using (SKData data = SKData.CreateCopy(imageBytes))
        {
            map = SKImage.FromEncodedData(data);
            mapSize = new SKSize(map.Width, map.Height);
        }

        base.OnInitialized();
    }

    void OnPaintSurface(SKPaintSurfaceEventArgs e)
    {
        Console.WriteLine("OnPaintSurface");

        SKSurface surface = e.Surface;
        SKCanvas canvas = surface.Canvas;
        canvas.Clear(SKColors.White);

        if (_viewportManager == null)
        {
            Console.WriteLine("Canvas Size:" + "Width:" + e.Info.Size.Width + " Height:" + e.Info.Size.Height);
            Console.WriteLine("Map Size:" + "Width:" + mapSize.Value.Width + " Height:" + mapSize.Value.Height);

            Console.WriteLine("Dpi:" + skiaView.Dpi);

            _viewportManager = new ViewportManager(e.Info.Size, 
                mapSize: mapSize, 
                mapResolution:0.05f,
                mapOriginOffsetX : 12.5f,
                mapOriginOffsetY : 12.5f,
                dpi: (float)skiaView.Dpi, 
                origin: ViewportManager.OriginCoordinate.BottomLeft);

        }
        else if (_viewportManager.ViewportSize != e.Info.Size)
        {
            Console.WriteLine("Canvas Resize:" + "Width:" + e.Info.Size.Width + " Height:" + e.Info.Size.Height);
            _viewportManager.Resize(e.Info.Size);
        }

        var matrix = _viewportManager.GetTransformMatrix();

        canvas.SetMatrix(matrix);

        Console.WriteLine($"matrix scaleX:{matrix.ScaleX} scaleY:{matrix.ScaleY} transX:{matrix.TransX} transY:{matrix.TransY}");

        // 在这里绘制你的内容
        // 例如：
        using (SKPaint paint = new SKPaint { Color = SKColors.Blue })
        {
            if (map != null)
            {
                canvas.DrawImage(map, 0, 0);
            }

            var point = new SKPoint(0, 0);
            canvas.DrawCircle(_viewportManager.WorldToMap(point), 5, paint);

            var point2 = new SKPoint(7.150f, -5.350f);
            canvas.DrawCircle(_viewportManager.WorldToMap(point2), 5, paint);
        }

    }

    void OnMouseMove(MouseEventArgs e)
    {
        var screenPoint = new SKPoint((float)e.OffsetX, (float)e.OffsetY);

        var worldPoint = _viewportManager.ScreenToWorld(screenPoint);

        worldPoint = _viewportManager.WorldFromMap(worldPoint);

        //打印坐标
        Console.WriteLine($"mouse x:{e.OffsetX} y:{e.OffsetY} . world x:{worldPoint.X} y:{worldPoint.Y}");

        currentX = worldPoint.X;
        currentY = worldPoint.Y;
        StateHasChanged();

        if (touchLocation == null)
            return;

        float dx = (float)e.OffsetX - touchLocation.Value.X;
        float dy = (float)e.OffsetY - touchLocation.Value.Y;

        _viewportManager.Pan(dx, dy);

        touchLocation = new SKPoint((float)e.OffsetX, (float)e.OffsetY);

        skiaView.Invalidate(); // 触发重绘

    }

    void OnMouseDown(MouseEventArgs e)
    {
        touchLocation = new SKPoint((float)e.OffsetX, (float)e.OffsetY);
    }

    void OnMouseUp(MouseEventArgs e)
    {
        touchLocation = null;
    }

    void OnWheel(WheelEventArgs e)
    {

        _viewportManager.Zoom((float)e.DeltaY, new SKPoint((float)e.OffsetX, (float)e.OffsetY));

        skiaView.Invalidate(); // 触发重绘
    }

    void HandleFitScreen(MouseEventArgs e)
    {
        // 处理点击事件的代码
        var contentBounds = CalculateContentBounds();
        _viewportManager.ZoomToFit(contentBounds);

        skiaView.Invalidate();
    }

    SKRect CalculateContentBounds()
    {
        using (SKPath path = new SKPath())
        {
            // 模拟绘制圆形

            var point = new SKPoint(0 , 0 );
            var circlePoint = _viewportManager.WorldToMap(point);
            path.AddCircle(circlePoint.X, circlePoint.Y, 5);

            var point2 = new SKPoint(7.150f, -5.350f);
            var circlePoint2 = _viewportManager.WorldToMap(point2);
            path.AddCircle(circlePoint2.X, circlePoint2.Y, 5);

            // 获取边界矩形
            path.GetBounds(out SKRect bounds);

            // 返回边界矩形
            return bounds;
        }
    }
}

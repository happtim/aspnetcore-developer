@page "/skiasharp/move"
@using BlazorWebassembly.Pages.skiasharp.Commands
@using BlazorWebassembly.Pages.skiasharp.Tools
@using SkiaSharp
@using SkiaSharp.Views.Blazor

@inject IJSRuntime JSRuntime
@attribute [RoutePriority(10)]

<div class="container">
    <div class="row">
        <div class="col border rounded p-2 canvas-container position-relative">

            <div style="position: absolute;bottom: 10px;left:15%; transform: translateX(-50%);z-index: 10;">
                <button class="btn btn-primary" @onclick="DrawLine">Line</button>
            </div>

            <SKCanvasView @ref="skiaView" OnPaintSurface="OnPaintSurface"
                          IgnorePixelScaling="false"
                          @onmousemove="OnMouseMove"
                          @onmousedown="OnMouseDown"
                          @onmouseup="OnMouseUp"
                          @onwheel="OnWheel" />

        </div>
    </div>
</div>

@code
{
    SKCanvasView skiaView = null!;
    private Viewport viewport = null!;
    private DrawManager _drawManager = null!;

    void OnPaintSurface(SKPaintSurfaceEventArgs e)
    {
        Console.WriteLine("OnPaintSurface");

        SKSurface surface = e.Surface;
        SKCanvas canvas = surface.Canvas;
        canvas.Clear(SKColors.White);

        if (viewport == null)
        {
            Console.WriteLine("Canvas Size:" + "Width:" + e.Info.Size.Width + " Height:" + e.Info.Size.Height);

            Console.WriteLine("Dpi:" + skiaView.Dpi);

            viewport = new Viewport(e.Info.Size, dpi: (float)skiaView.Dpi);

            _drawManager = new DrawManager(skiaView, viewport);
        }

        var matrix = viewport.GetTransformMatrix();

        canvas.SetMatrix(matrix);

        Console.WriteLine($"matrix scaleX:{matrix.ScaleX} scaleY:{matrix.ScaleY} transX:{matrix.TransX} transY:{matrix.TransY}");

        // 在这里绘制你的内容
        // 例如：
        using (SKPaint paint = new SKPaint { Color = SKColors.Blue })
        {
            canvas.DrawCircle(0, 0, 100, paint);

            paint.Color = new SKColor(255, 0, 0);

            canvas.DrawCircle(200, 200, 2, paint);
        }

        _drawManager.Draw(canvas);

    }

    async Task OnMouseMove(MouseEventArgs e)
    {
        var screenPoint = new SKPoint((float)e.OffsetX, (float)e.OffsetY);

        var worldPoint = viewport.ScreenToWorld(screenPoint);

        //打印坐标
        //Console.WriteLine($"mouse x:{e.OffsetX} y:{e.OffsetY} . world x:{woldPoint.X} y:{woldPoint.Y}");

        if (_drawManager.CurrentTool != null)
        {
            _drawManager.CurrentTool.MouseMove(worldPoint);
        }
        else
        {
            if( _drawManager.HitTest(worldPoint) != null)
            {
                await JSRuntime.InvokeVoidAsync("changeCursor", "move");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("changeCursor", "default");
            }
        }


    }

    void OnMouseDown(MouseEventArgs e)
    {
        var screenPoint = new SKPoint((float)e.OffsetX, (float)e.OffsetY);

        var worldPoint = viewport.ScreenToWorld(screenPoint);

        //button middle
        if (e.Button == 1)
        {
            if (_drawManager.CurrentTool == null)
            {
                new PanTool(_drawManager);
            }
        }

        if (_drawManager.CurrentTool != null)
        {
            _drawManager.CurrentTool.MouseDown(worldPoint);
        }
    }

    void OnMouseUp(MouseEventArgs e)
    {
        var screenPoint = new SKPoint((float)e.OffsetX, (float)e.OffsetY);

        var worldPoint = viewport.ScreenToWorld(screenPoint);

        if (_drawManager.CurrentTool != null)
        {
            _drawManager.CurrentTool.MouseUp(worldPoint);
        }
    }

    void OnWheel(WheelEventArgs e)
    {
        viewport.Zoom((float)e.DeltaY, new SKPoint((float)e.OffsetX, (float)e.OffsetY));

        skiaView.Invalidate(); // 触发重绘
    }

    void DrawLine(MouseEventArgs e)
    {
        new LineTool(_drawManager);
    }

}

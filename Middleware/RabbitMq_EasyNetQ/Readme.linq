<Query Kind="Statements" />

//EasyNetQ旨在将所有这些问题封装在一个简单易用的库中，该库位于现有的AMQP客户端之上。
//这是RabbitMQ在大批量商业环境中多年使用经验的结晶。

//EasyNetQ的目标是提供一个库，使在.NET中使用RabbitMQ尽可能简单。
//为了做到这一点，它必须对你应该如何将RabbitMQ与.NET一起使用有一个固执己见的观点。
//它通过强制实施一些简单的约定来牺牲灵活性和简单性。其中包括：
//	消息应由.NET 类型表示。
//	消息应按其.NET 类型进行路由。

//这意味着消息由 .NET 类定义。要发送的每个不同消息类型都由一个类表示。
//public class MyMessage
//{
//	public string Text { get; set; }
//}

//EasyNetQ 按消息类型路由消息。发布消息时，EasyNetQ 会检查其类型，并根据类型名称、命名空间和程序集为其提供routing key。
//在消费端，订阅者订阅类型。订阅某种类型后，该类型的消息将路由到订阅者。

//EasyNetQ 是在 RabbitMQ.Client 库之上提供服务的组件集合。
//它们执行序列化、错误处理、线程编组、连接管理等操作。
//它们由一个小型 IoC 容器组成。您可以非常轻松地将任何组件替换为自己的实现。